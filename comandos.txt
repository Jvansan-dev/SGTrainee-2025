*COMANDOS*

exe01.png

clean //limpa

*primeiro* numero da linha - 24
*segundo* numero da coluna - 79
*say* mostra na tela


@02,01 say "Exercicio 06 - Media de tres numeros"
@00,00 say Replicate ("_",79)
@11,01 say Replicate ("_",79)

--------------------------
comando pra compilar *hbmk2*
pra criar arquivo com editor "q"
Replicate("*",50)
*say* mostra na tela
*get* pra digitar
"read" em baixo do bloco de 'get'
:= comando de atribuição
picture(mascara) sempre em "@E" exemplo picture "999" ou "999.9" ou "@E 999.9" pra aparecer virgula pro usuario
valid serve para validar algo, exemplo: valid nNumeroA >= 0, tudo que for menor ou igual a 0 nao passa
*to* cria uma caixa com _  @00,00 to 80,80 // to clear pra limpar parte da tela
valid !Empty(cNomeC) pra nao passar em branco
Inkey (nSegundos) 0 para quando quer pausar, ou adicionar o tempo em segundos
---------------------
if > comeco
elseif > mais condicoes
else > qualquer outra coisa
endif > fim
-------------------------
w - branco
n - preto
b - azul
g - verde
r - vermelho

set color to w/n
primeiro letra
depois fundo

AllTrim(Str(n))
@01,01 say "o aluno" + AllTrim(cNome) + "Foi aprovado"
@01,01 say "a media é " + str(nMedia)
Alltrim (Str(nValor))
------------------------
Estrutura de repeticao

do while <condicao> //abertura //faca enquanto

enddo //fechamento

nInteracoes := 1

do while nInteracoes <= 10
    //imprime cNome
    nInteracoes++
enddo
------------------------

LEN() retorna o comprimento (número de caracteres) de uma string.
LEN(<cString>)
LEN("Hello")          // Retorna: 5
LEN("Harbour")        // Retorna: 7  
LEN("")               // Retorna: 0
LEN("123 456")        // Retorna: 7 (espaço conta como caractere)
LEN("Ção")           // Retorna: 3 (caracteres acentuados contam normalmente)


SUBSTR() extrai uma substring (parte de uma string) a partir de uma posição específica.
*exemplo*

cTexto := "Harbour Power"
SUBSTR(cTexto, 1, 7)      // Retorna: "Harbour"
SUBSTR(cTexto, 9)         // Retorna: "Power" (até o final)
SUBSTR(cTexto, 9, 3)      // Retorna: "Pow"
SUBSTR("ABCDE", 3, 2)     // Retorna: "CD"
SUBSTR("Teste", 6)        // Retorna: "" (string vazia)

-------------------------------
OPERADORES ARITMÉTICOS
+   // Adição
-   // Subtração  
*   // Multiplicação
/   // Divisão
%   // Módulo (resto da divisão)
^   // Exponenciação
**  // Exponenciação (alternativo)
Exemplos:
5 + 3    // 8
10 - 4   // 6
2 * 6    // 12
15 / 3   // 5
10 % 3   // 1 (resto da divisão)
2 ^ 3    // 8 (2 elevado a 3)
3 ** 2   // 9 (3 elevado a 2)
---------------------------------
OPERADORES RELACIONAIS (COMPARAÇÃO)
=   // Igual
==  // Exatamente igual (case-sensitive)
!=  // Diferente
<>  // Diferente (alternativo)
#   // Diferente (alternativo)
>   // Maior que
<   // Menor que
>=  // Maior ou igual
<=  // Menor ou igual
Exemplo:
5 = 5        // .T. (true)
"A" == "a"   // .F. (false - case sensitive)
10 != 5      // .T. (true)
7 > 3        // .T. (true)
"B" < "A"    // .F. (false)
---------------------------------
OPERADORES DE STRING
+       // Concatenação
-       // Concatenação com remoção de espaços
$       // Contido em (substring)
==      // Comparação exata
Exemplo:
"Hello" + " World"     // "Hello World"
"Hello " - " World"    // "HelloWorld" (remove espaços)
"abc" $ "abcdef"       // .T. (abc está contido em abcdef)
"ABC" == "abc"         // .F. (case sensitive)
---------------------------------
OPERADORES DE ATRIBUIÇÃO
:=      // Atribuição simples
+=      // Atribuição com adição
-=      // Atribuição com subtração
*=      // Atribuição com multiplicação
/=      // Atribuição com divisão
%=      // Atribuição com módulo
Exemplo:
nValor := 10          // Atribuição simples
nValor += 5           // nValor = 15
nValor -= 3           // nValor = 12
nValor *= 2           // nValor = 24
nValor /= 4           // nValor = 6
nValor %= 5           // nValor = 1
---------------------------------